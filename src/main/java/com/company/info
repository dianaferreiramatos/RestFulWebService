https://mari-azevedo.medium.com/construindo-uma-api-restful-com-java-e-spring-framework-46b74371d107
https://stackify.com/java-xml-jackson/
https://blog.algaworks.com/spring-mvc/

O principal protocolo de comunicação na Web é o HTTP. Ele funciona como um protocolo de requisição-resposta em um modelo
que chamamos de cliente-servidor. O cliente manda uma requisição HTTP para o servidor e o servidor, com recursos e conteúdos
próprios, retorna uma mensagem de resposta para o cliente.



GET: método utilizado para ler e recuperar dados. Requisita uma representação do recurso especificado e retorna essa representação.
POST: método utilizado para criar um novo recurso. Envia dados ao servidor. O tipo do corpo da solicitação é indicado pelo
 cabeçalho Content-Type.
PUT: cria um novo recurso ou substitui uma representação do recurso de destino com os novos dados. A diferença entre PUT e
 POST é que PUT é idempotente: ao chamá-lo uma ou várias vezes sucessivamente o efeito é o mesmo, enquanto se chamar o POST
 repetidamente pode ter efeitos adicionais. Por exemplo, se criarmos um produto com POST, se a URL definida na API for
 chamada 20 vezes, 20 produtos serão criados e cada um deles terá um ID diferente. Já o com o PUT se você executar a URL
 definida na API 20 vezes, o resultado tem que ser o mesmo: o mesmo produto atualizado 20 vezes.
DELETE: exclui o recurso.

1 - Adicionar possibilidade de autenticacao.